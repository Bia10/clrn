// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_data_2eproto__INCLUDED
#define PROTOBUF_data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_data_2eproto();
void protobuf_AssignDesc_data_2eproto();
void protobuf_ShutdownFile_data_2eproto();

class Table;
class Table_Column;
class Table_Row;

enum Table_Column_DataType {
  Table_Column_DataType_INT = 0,
  Table_Column_DataType_DOUBLE = 1,
  Table_Column_DataType_ANSI = 2,
  Table_Column_DataType_UTF8 = 3,
  Table_Column_DataType_UTF16 = 4,
  Table_Column_DataType_BIN = 5
};
bool Table_Column_DataType_IsValid(int value);
const Table_Column_DataType Table_Column_DataType_DataType_MIN = Table_Column_DataType_INT;
const Table_Column_DataType Table_Column_DataType_DataType_MAX = Table_Column_DataType_BIN;
const int Table_Column_DataType_DataType_ARRAYSIZE = Table_Column_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Table_Column_DataType_descriptor();
inline const ::std::string& Table_Column_DataType_Name(Table_Column_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Table_Column_DataType_descriptor(), value);
}
inline bool Table_Column_DataType_Parse(
    const ::std::string& name, Table_Column_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Table_Column_DataType>(
    Table_Column_DataType_descriptor(), name, value);
}
// ===================================================================

class Table_Column : public ::google::protobuf::Message {
 public:
  Table_Column();
  virtual ~Table_Column();
  
  Table_Column(const Table_Column& from);
  
  inline Table_Column& operator=(const Table_Column& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Table_Column& default_instance();
  
  void Swap(Table_Column* other);
  
  // implements Message ----------------------------------------------
  
  Table_Column* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table_Column& from);
  void MergeFrom(const Table_Column& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Table_Column_DataType DataType;
  static const DataType INT = Table_Column_DataType_INT;
  static const DataType DOUBLE = Table_Column_DataType_DOUBLE;
  static const DataType ANSI = Table_Column_DataType_ANSI;
  static const DataType UTF8 = Table_Column_DataType_UTF8;
  static const DataType UTF16 = Table_Column_DataType_UTF16;
  static const DataType BIN = Table_Column_DataType_BIN;
  static inline bool DataType_IsValid(int value) {
    return Table_Column_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    Table_Column_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    Table_Column_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    Table_Column_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return Table_Column_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return Table_Column_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return Table_Column_DataType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .data.Table.Column.DataType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::data::Table_Column_DataType type() const;
  inline void set_type(::data::Table_Column_DataType value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:data.Table.Column)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Table_Column* default_instance_;
};
// -------------------------------------------------------------------

class Table_Row : public ::google::protobuf::Message {
 public:
  Table_Row();
  virtual ~Table_Row();
  
  Table_Row(const Table_Row& from);
  
  inline Table_Row& operator=(const Table_Row& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Table_Row& default_instance();
  
  void Swap(Table_Row* other);
  
  // implements Message ----------------------------------------------
  
  Table_Row* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table_Row& from);
  void MergeFrom(const Table_Row& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated bytes data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data(int index) const;
  inline ::std::string* mutable_data(int index);
  inline void set_data(int index, const ::std::string& value);
  inline void set_data(int index, const char* value);
  inline void set_data(int index, const void* value, size_t size);
  inline ::std::string* add_data();
  inline void add_data(const ::std::string& value);
  inline void add_data(const char* value);
  inline void add_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_data();
  
  // @@protoc_insertion_point(class_scope:data.Table.Row)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Table_Row* default_instance_;
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message {
 public:
  Table();
  virtual ~Table();
  
  Table(const Table& from);
  
  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();
  
  void Swap(Table* other);
  
  // implements Message ----------------------------------------------
  
  Table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Table_Column Column;
  typedef Table_Row Row;
  
  // accessors -------------------------------------------------------
  
  // repeated .data.Table.Column columns = 1;
  inline int columns_size() const;
  inline void clear_columns();
  static const int kColumnsFieldNumber = 1;
  inline const ::data::Table_Column& columns(int index) const;
  inline ::data::Table_Column* mutable_columns(int index);
  inline ::data::Table_Column* add_columns();
  inline const ::google::protobuf::RepeatedPtrField< ::data::Table_Column >&
      columns() const;
  inline ::google::protobuf::RepeatedPtrField< ::data::Table_Column >*
      mutable_columns();
  
  // repeated .data.Table.Row rows = 2;
  inline int rows_size() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 2;
  inline const ::data::Table_Row& rows(int index) const;
  inline ::data::Table_Row* mutable_rows(int index);
  inline ::data::Table_Row* add_rows();
  inline const ::google::protobuf::RepeatedPtrField< ::data::Table_Row >&
      rows() const;
  inline ::google::protobuf::RepeatedPtrField< ::data::Table_Row >*
      mutable_rows();
  
  // @@protoc_insertion_point(class_scope:data.Table)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::data::Table_Column > columns_;
  ::google::protobuf::RepeatedPtrField< ::data::Table_Row > rows_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Table* default_instance_;
};
// ===================================================================


// ===================================================================

// Table_Column

// required .data.Table.Column.DataType type = 1;
inline bool Table_Column::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Table_Column::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Table_Column::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Table_Column::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::data::Table_Column_DataType Table_Column::type() const {
  return static_cast< ::data::Table_Column_DataType >(type_);
}
inline void Table_Column::set_type(::data::Table_Column_DataType value) {
  GOOGLE_DCHECK(::data::Table_Column_DataType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string name = 2;
inline bool Table_Column::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Table_Column::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Table_Column::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Table_Column::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Table_Column::name() const {
  return *name_;
}
inline void Table_Column::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Table_Column::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Table_Column::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Table_Column::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Table_Column::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Table_Row

// repeated bytes data = 1;
inline int Table_Row::data_size() const {
  return data_.size();
}
inline void Table_Row::clear_data() {
  data_.Clear();
}
inline const ::std::string& Table_Row::data(int index) const {
  return data_.Get(index);
}
inline ::std::string* Table_Row::mutable_data(int index) {
  return data_.Mutable(index);
}
inline void Table_Row::set_data(int index, const ::std::string& value) {
  data_.Mutable(index)->assign(value);
}
inline void Table_Row::set_data(int index, const char* value) {
  data_.Mutable(index)->assign(value);
}
inline void Table_Row::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Table_Row::add_data() {
  return data_.Add();
}
inline void Table_Row::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
}
inline void Table_Row::add_data(const char* value) {
  data_.Add()->assign(value);
}
inline void Table_Row::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Table_Row::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Table_Row::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// Table

// repeated .data.Table.Column columns = 1;
inline int Table::columns_size() const {
  return columns_.size();
}
inline void Table::clear_columns() {
  columns_.Clear();
}
inline const ::data::Table_Column& Table::columns(int index) const {
  return columns_.Get(index);
}
inline ::data::Table_Column* Table::mutable_columns(int index) {
  return columns_.Mutable(index);
}
inline ::data::Table_Column* Table::add_columns() {
  return columns_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::data::Table_Column >&
Table::columns() const {
  return columns_;
}
inline ::google::protobuf::RepeatedPtrField< ::data::Table_Column >*
Table::mutable_columns() {
  return &columns_;
}

// repeated .data.Table.Row rows = 2;
inline int Table::rows_size() const {
  return rows_.size();
}
inline void Table::clear_rows() {
  rows_.Clear();
}
inline const ::data::Table_Row& Table::rows(int index) const {
  return rows_.Get(index);
}
inline ::data::Table_Row* Table::mutable_rows(int index) {
  return rows_.Mutable(index);
}
inline ::data::Table_Row* Table::add_rows() {
  return rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::data::Table_Row >&
Table::rows() const {
  return rows_;
}
inline ::google::protobuf::RepeatedPtrField< ::data::Table_Row >*
Table::mutable_rows() {
  return &rows_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::data::Table_Column_DataType>() {
  return ::data::Table_Column_DataType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2eproto__INCLUDED
