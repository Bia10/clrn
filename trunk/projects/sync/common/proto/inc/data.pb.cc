// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace data {

namespace {

const ::google::protobuf::Descriptor* Table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Table_reflection_ = NULL;
const ::google::protobuf::Descriptor* Table_Row_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Table_Row_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Table_Action_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Table_Id_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_2eproto() {
  protobuf_AddDesc_data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data.proto");
  GOOGLE_CHECK(file != NULL);
  Table_descriptor_ = file->message_type(0);
  static const int Table_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, action_),
  };
  Table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Table_descriptor_,
      Table::default_instance_,
      Table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Table));
  Table_Row_descriptor_ = Table_descriptor_->nested_type(0);
  static const int Table_Row_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Row, data_),
  };
  Table_Row_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Table_Row_descriptor_,
      Table_Row::default_instance_,
      Table_Row_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Row, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Row, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Table_Row));
  Table_Action_descriptor_ = Table_descriptor_->enum_type(0);
  Table_Id_descriptor_ = Table_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Table_descriptor_, &Table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Table_Row_descriptor_, &Table_Row::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_2eproto() {
  delete Table::default_instance_;
  delete Table_reflection_;
  delete Table_Row::default_instance_;
  delete Table_Row_reflection_;
}

void protobuf_AddDesc_data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndata.proto\022\004data\"\217\002\n\005Table\022\035\n\004rows\030\001 \003"
    "(\0132\017.data.Table.Row\022\032\n\002id\030\002 \001(\0162\016.data.T"
    "able.Id\022*\n\006action\030\003 \001(\0162\022.data.Table.Act"
    "ion:\006Insert\032\023\n\003Row\022\014\n\004data\030\001 \003(\014\" \n\006Acti"
    "on\022\n\n\006Insert\020\000\022\n\n\006Delete\020\001\"h\n\002Id\022\010\n\004None"
    "\020\000\022\013\n\007Modules\020\001\022\014\n\010Settings\020\002\022\t\n\005Hosts\020\003"
    "\022\013\n\007HostMap\020\004\022\020\n\014HostMapEvent\020\005\022\023\n\017HostS"
    "tatusEvent\020\006", 292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
  Table::default_instance_ = new Table();
  Table_Row::default_instance_ = new Table_Row();
  Table::default_instance_->InitAsDefaultInstance();
  Table_Row::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2eproto {
  StaticDescriptorInitializer_data_2eproto() {
    protobuf_AddDesc_data_2eproto();
  }
} static_descriptor_initializer_data_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Table_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_Action_descriptor_;
}
bool Table_Action_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Table_Action Table::Insert;
const Table_Action Table::Delete;
const Table_Action Table::Action_MIN;
const Table_Action Table::Action_MAX;
const int Table::Action_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Table_Id_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_Id_descriptor_;
}
bool Table_Id_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Table_Id Table::None;
const Table_Id Table::Modules;
const Table_Id Table::Settings;
const Table_Id Table::Hosts;
const Table_Id Table::HostMap;
const Table_Id Table::HostMapEvent;
const Table_Id Table::HostStatusEvent;
const Table_Id Table::Id_MIN;
const Table_Id Table::Id_MAX;
const int Table::Id_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Table_Row::kDataFieldNumber;
#endif  // !_MSC_VER

Table_Row::Table_Row()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Table_Row::InitAsDefaultInstance() {
}

Table_Row::Table_Row(const Table_Row& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Table_Row::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Table_Row::~Table_Row() {
  SharedDtor();
}

void Table_Row::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Table_Row::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table_Row::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_Row_descriptor_;
}

const Table_Row& Table_Row::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Table_Row* Table_Row::default_instance_ = NULL;

Table_Row* Table_Row::New() const {
  return new Table_Row;
}

void Table_Row::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Table_Row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Table_Row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Table_Row::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Table_Row::ByteSize() const {
  int total_size = 0;
  
  // repeated bytes data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table_Row::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Table_Row* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Table_Row*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Table_Row::MergeFrom(const Table_Row& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Table_Row::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table_Row::CopyFrom(const Table_Row& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table_Row::IsInitialized() const {
  
  return true;
}

void Table_Row::Swap(Table_Row* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Table_Row::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Table_Row_descriptor_;
  metadata.reflection = Table_Row_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Table::kRowsFieldNumber;
const int Table::kIdFieldNumber;
const int Table::kActionFieldNumber;
#endif  // !_MSC_VER

Table::Table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Table::InitAsDefaultInstance() {
}

Table::Table(const Table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Table::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Table::~Table() {
  SharedDtor();
}

void Table::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_descriptor_;
}

const Table& Table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Table* Table::default_instance_ = NULL;

Table* Table::New() const {
  return new Table;
}

void Table::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    id_ = 0;
    action_ = 0;
  }
  rows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .data.Table.Row rows = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rows;
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional .data.Table.Id id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::data::Table_Id_IsValid(value)) {
            set_id(static_cast< ::data::Table_Id >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }
      
      // optional .data.Table.Action action = 3 [default = Insert];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::data::Table_Action_IsValid(value)) {
            set_action(static_cast< ::data::Table_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .data.Table.Row rows = 1;
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rows(i), output);
  }
  
  // optional .data.Table.Id id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->id(), output);
  }
  
  // optional .data.Table.Action action = 3 [default = Insert];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .data.Table.Row rows = 1;
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rows(i), target);
  }
  
  // optional .data.Table.Id id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->id(), target);
  }
  
  // optional .data.Table.Action action = 3 [default = Insert];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Table::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .data.Table.Id id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
    }
    
    // optional .data.Table.Action action = 3 [default = Insert];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }
    
  }
  // repeated .data.Table.Row rows = 1;
  total_size += 1 * this->rows_size();
  for (int i = 0; i < this->rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rows(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
  GOOGLE_CHECK_NE(&from, this);
  rows_.MergeFrom(from.rows_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  
  return true;
}

void Table::Swap(Table* other) {
  if (other != this) {
    rows_.Swap(&other->rows_);
    std::swap(id_, other->id_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Table_descriptor_;
  metadata.reflection = Table_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data

// @@protoc_insertion_point(global_scope)
